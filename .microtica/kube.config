---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "pvc-{{MIC_NAME}}"
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-managed
  resources:
    requests:
      storage: 1Mi # irrelevant param, but must be provided
---
# Postgres

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-postgres"
  labels:
    app: "{{MIC_NAME}}-postgres"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-postgres"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-postgres"
    spec:
      containers:
        - name: "appwrite-postgres"
          image: postgres:15.3
          securityContext:
            runAsUser: 50000
            runAsGroup: 50000
          env:
            - name: POSTGRES_DB
              value: "n8n"
            - name: POSTGRES_USER
              value: "n8n"
            - name: POSTGRES_PASSWORD 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              subPath: postgres
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-postgres"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-postgres"
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-postgres"
---


apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    app: "{{MIC_NAME}}"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}"
    spec:
      imagePullSecrets:
        - name: {{MIC_REGISTRY}}
      containers:
      - name: "{{MIC_NAME}}"
        image: "{{MIC_IMAGE}}"
        env:
        - name: MIC_EXECUTION_ID
          value: "{{MIC_EXECUTION_ID}}"
        - name: N8N_PORT
          value: "5678"
        - name: NODE_ENV
          value: production
        - name: WEBHOOK_URL
          value: https://{{MIC_DOMAIN_NAME}}/
        - name: EXECUTIONS_PROCESS
          value: main
        - name: DB_TYPE
          value: postgresdb
        - name: DB_POSTGRESDB_DATABASE
          value: n8n
        - name: DB_POSTGRESDB_HOST
          value: "{{MIC_NAME}}-postgres"
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        - name: DB_POSTGRESDB_USER
          value: n8n
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{MIC_SECRET_NAME}}
              key: DatabasePassword
        ports:
        - name: http
          containerPort: 5678
        volumeMounts:
          - name: data
            mountPath: /home/node/.n8n
            subPath: "{{MIC_NAMESPACE}}-{{MIC_NAME}}-data"
      volumes:
        - name: "data"
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}"
spec:
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
  type: NodePort
  selector:
    app: "{{MIC_NAME}}"
---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta2
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    microticaService: "{{MIC_NAME}}"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{MIC_NAME}}"
  minReplicas: {{MIC_AS_MIN_REPLICAS}}
  maxReplicas: {{MIC_AS_MAX_REPLICAS}}
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{MIC_AS_MEMORY_UTILIZATION}}
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{MIC_AS_CPU_UTILIZATION}}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: "{{MIC_DOMAIN_NAME}}"
  namespace: "{{MIC_NAMESPACE}}"
  labels:
    microticaService: "{{MIC_NAME}}"
spec:
  secretName: "{{MIC_DOMAIN_TLS}}"
  dnsNames:
  - "{{MIC_DOMAIN_NAME}}"
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{MIC_NAME}}"
  namespace: "{{MIC_NAMESPACE}}"
spec:
  ingressClassName: nginx
  rules:
    - host: "{{MIC_DOMAIN_NAME}}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{MIC_NAME}}"
                port:
                  number: 80
  tls:
    - hosts:
        - "{{MIC_DOMAIN_NAME}}"
      secretName: "{{MIC_DOMAIN_TLS}}"